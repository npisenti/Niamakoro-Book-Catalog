#!/usr/bin/env ruby
#
# This is: script/generate_cities_seed_from_csv
#
#require 'seed-fu'
require File.join(File.dirname(__FILE__), '..', 'vendor/plugins/seed-fu/lib/seed-fu/writer')
require 'active_support/core_ext'
require 'rubygems'
require 'csv'


BOOKS = File.join( File.dirname(__FILE__), '..', 'db/SeedData/books.csv')
BOOKS_OUT = File.join( File.dirname(__FILE__), '..', 'db', 'fixtures', '01_books.rb' )

# Create a seed_writer, walk the CSV, add to the file.
book_writer = SeedFu::Writer.new({:class_name => 'Book', :seed_by => [:id] })
author_writer = SeedFu::Writer.new({:class_name => 'Author', :seed_by => [:first, :last] })
subject_writer = SeedFu::Writer.new({:class_name => 'Subject', :seed_by => [:name] })


# Exports Calculus Components
book_writer.write(BOOKS_OUT) do |b_writer|
  author_writer.write(BOOKS
  CSV.foreach(BOOKS, :return_headers => false, :headers => :first_row) do |row|
    b_writer.add({
      :id => row['id'], 
      :title => row['title'], 
      :pub_year => row['pub_year'], 
      :genre => row['genre'], 
      :age_group => row['age_group'], 
      :num_pages => row['num_pages'], 
      :num_copies => row['num_copies'], 
      :series_title => row['series_title'], 
      :series_number => row['series_number'], 
      :notes => row['notes'] 
    })
    
    if !row['author_1_last'].empty?
      a_writer.add({
        :first => row['author_1_last'],
        :last => row['author_1_first']
      })
    end
    if !row['author_2_last'].empty?
      a_writer.add({
        :first => row['author_2_last'],
        :last => row['author_2_first']
      })
    end
  end
end
end

# Exports Calculus Components
component_writer.write(CALC_COMPONENTS_OUT) do |writer|
  CSV.foreach(CALC_COMPONENTS, :return_headers => false, :headers => :first_row) do |row|
    writer.add({
      :id => id_encode("CalculusComponents-#{row['UniqueID']}"),
      :course_id => 2,
      :name => row['name'],
      :description => row['description']
    })
  end
end

# Exports Calculus Quizzes
quiz_writer.write(CALC_QUIZ_OUT) do |q_writer|
  answer_writer.write(CALC_ANSW_OUT) do |a_writer|
    CSV.foreach(CALC_QUIZ, :return_headers => false, :headers => :first_row) do |row|

      if ["multi", "check"].include?(row['answer_type']) 
        answer_choice_tokens = (0..3).to_a.map { |a| row["choice_#{a}"] }.keep_if { |v| !v.nil? }
        answer_tokens = row['answer'].split("") 
        answer_input =  { :type => row['answer_type'], :choices => answer_choice_tokens}.to_json
      elsif ["self-rate", "text"].include?(row['answer_type'])
        answer_tokens = row['answer'].nil? ? [] : row['answer'].split("&") 
        answer_input = { :type => row['answer_type'] }.to_json
      end
      #answer_tokens = (0..3).to_a.map { |a| row["choice_#{a}"] }.keep_if { |v| !v.nil? }
      component_tokens = row['components'].to_s.split(",").map{ |c| id_encode("CalculusComponents-#{c}") }.join(",")
      quiz_id = id_encode("CalculusExercises-#{row['UniqueID']}")
      in_lesson = row['in_lesson'] == "TRUE" ? true : false
      q_writer.add({
        :id => quiz_id, 
        :course_id => 2,
        :in_lesson => in_lesson,
        :question => row['question'],
        :answer_type => row['answer_type'],
        :answer_input => answer_input, 
        :answer_output => {:type => "text"}.to_json,
        :component_tokens => component_tokens
      })
      answer_tokens.each_with_index do |a, ans_i|
        answer_id = id_encode("CalculusExercisesAnswer-#{quiz_id}-#{ans_i}")
        a_writer.add({ :id => answer_id, :quiz_id => quiz_id, :text => a })
      end 
    end
  end
end

# Exports Caclulus Lessons
lesson_writer.write(CALC_LESSON_OUT) do |l_writer|
  event_writer.write(CALC_LESSON_EVENT_OUT) do |e_writer|
    note_writer.write(CALC_LESSON_NOTE_OUT) do |n_writer|
      CSV.foreach(CALC_LESSONS_INDEX, :return_headers => false, :headers => :first_row) do |row|
        lesson_id = id_encode("CalculusLesson-#{row['UniqueID']}")
        component_tokens = row['components'].to_s.split(",").map{ |c| id_encode("CalculusComponents-#{c}") }.join(",")
        l_writer.add({
          :id => lesson_id,
          :course_id => row['course_id'].to_i,
          :name => row['name'],
          :order_number => row['order_number'].to_i,
          :component_tokens => component_tokens 
        })

        lesson_root_path = File.join( File.dirname(__FILE__), '..', "lib/tasks/DataFiles/Calculus/Lessons/#{row['lesson_path']}")
        lesson_index_path = File.join( lesson_root_path, "index_#{row['lesson_path']}.csv")

        CSV.foreach(lesson_index_path, :return_headers => false, :headers => :first_row) do |l_row|
          contents = l_row['is_document'] == "TRUE" ? File.open(File.join(lesson_root_path, l_row['playable_path_trunk'] + l_row['playable_path_itr'].rjust(2,"0")) + ".txt", 'rb') { |ff| ff.read } : l_row['note_content']

          event_id = id_encode("CalculusEvent-#{row['UniqueID']*2}#{l_row['order_number']*2}") 
          e_writer.add({
            :id => event_id,
            :lesson_id => lesson_id,
            :order_number => l_row['order_number'].to_i,
            :video_url => l_row['video_url'],
            :start_time => l_row['start_time'].to_i,
            :end_time => l_row['end_time'].to_i
          })
          contents.gsub!(/~Q(\d+)Q/){ "~Q" + id_encode("CalculusExercises-#{$1}").to_s + "Q"}
          n_writer.add({
            :id => id_encode("CalculusNote-#{row['UniqueID']*2}#{l_row['order_number']*2}"), 
            :content => contents,
            :is_document => l_row['is_document'],
            :event_token => event_id.to_s
          })
        end
      end
    end
  end
end

# Exports Physics Components
#
component_writer.write(PHYS_COMPONENTS_OUT) do |writer|
  CSV.foreach( PHYS_COMPONENTS, :return_headers => false, :headers => :first_row) do |row|
    writer.add({
      :id => id_encode("PhysicsComponents-#{row['UniqueID']}"),
      :course_id => 1,
      :name => row['name'],
      :description => row['description']
    })
  end
end

lesson_writer.write(PHYS_LESSON_OUT) do |l_writer|
  event_writer.write(PHYS_LESSON_EVENT_OUT) do |e_writer|
    note_writer.write(PHYS_LESSON_NOTE_OUT) do |n_writer|
      quiz_writer.write(PHYS_QUIZ_OUT) do |q_writer|
        answer_writer.write(PHYS_ANSW_OUT) do |a_writer|

          CSV.foreach(PHYS_LESSONS_INDEX, :return_headers => false, :headers => :first_row) do |row|
            lesson_id = id_encode("PhysicsLesson-#{row['UniqueID']}")
            component_tokens = row['components'].to_s.split(",").map{ |c| id_encode("PhysicsComponents-#{c}") }.join(",")

            l_writer.add({
              :id => lesson_id,
              :course_id => row['course_id'].to_i,
              :name => row['name'],
              :order_number => row['order_number'].to_i,
            # :component_tokens => component_tokens 
            })
            l_writer.add({
              :id => lesson_id,
              :component_tokens => component_tokens 
            })

          end
          #lesson_root_path = File.join( File.dirname(__FILE__), '..', "lib/tasks/DataFiles/Calculus/Lessons/#{row['lesson_path']}")
          #lesson_index_path = File.join( lesson_root_path, "index_#{row['lesson_path']}.csv")

          CSV.foreach(PHYS_LESSONS_DOC, :return_headers => false, :headers => :first_row) do |l_row|
            contents = l_row['note_content']
            lesson_id = id_encode("PhysicsLesson-#{l_row['UniqueID']}")
            event_id = id_encode("PhysicsEvent-#{l_row['UniqueID']*2}#{l_row['order_number']*2}") 
            e_writer.add({
              :id => event_id,
              :lesson_id => lesson_id,
              :order_number => l_row['order_number'].to_i,
              :video_url => l_row['video_url'],
              :start_time => l_row['start_time'].to_i,
              :end_time => l_row['end_time'].to_i
            })
            #contents.gsub!(/~Q(\d+)Q/){ "~Q" + id_encode("CalculusExercises-#{$1}").to_s + "Q"}
            if l_row['playable_type'] == "Note"
              note_id = id_encode("PhysicsNote-#{l_row['UniqueID']*2}#{l_row['order_number']*2}") 
              n_writer.add({
                :id => note_id, 
                :content => contents,
                :is_document => false,
                :event_token => event_id.to_s
              })
            elsif l_row['playable_type'] == "Quiz"
              if ["multi", "check"].include?(l_row['answer_type']) 
                answer_choice_tokens = (0..7).to_a.map { |a| l_row["choice_#{a}"] }.keep_if { |v| !v.nil? }
                answer_tokens = [l_row['answer']] 
                answer_input =  { :type => l_row['answer_type'], :choices => answer_choice_tokens}.to_json
              elsif ["self-rate", "text"].include?(l_row['answer_type'])
                answer_tokens = l_row['answer'].nil? ? [] : l_row['answer'].split("&") 
                answer_input = { :type => l_row['answer_type'] }.to_json
              end
              component_tokens = l_row['quiz_components'].to_s.split(",").map{ |c| id_encode("PhysicsComponents-#{c}") }.join(",")
              quiz_id = id_encode("PhysicsLessonQuiz-#{l_row['UniqueID']*2}#{l_row['order_number']*2}")
              q_writer.add({
                :id => quiz_id, 
                :course_id => 1,
                :in_lesson => l_row['in_lesson'] == "1" ? true : false,
                :question => l_row['question'],
                :answer_type => l_row['answer_type'],
                :answer_input => answer_input, 
                :answer_output => {:type => "text"}.to_json,
                :component_tokens => component_tokens,
                :event_token => event_id.to_s
              })

              answer_tokens.each_with_index do |a, ans_i|
                answer_id = id_encode("PhysicsExercisesAnswer-#{quiz_id}-#{ans_i}")
                a_writer.add({ :id => answer_id, :quiz_id => quiz_id, :text => a })
              end 
            end
          end

          # Export Physics Exercises
          #
          CSV.foreach(PHYS_QUIZ, :return_headers => false, :headers => :first_row) do |row|
            if ["multi", "check"].include?(row['answer_type']) 
              answer_choice_tokens = (0..8).to_a.map { |a| row["choice_#{a}"] }.keep_if { |v| !v.nil? }
              answer_tokens = [row['answer']] 
              answer_input =  { :type => row['answer_type'], :choices => answer_choice_tokens}.to_json
            elsif ["self-rate", "text"].include?(row['answer_type'])
              answer_tokens = row['answer'].nil? ? [] : row['answer'].split("&") 
              answer_input = { :type => row['answer_type'] }.to_json
            end
            component_tokens = row['components'].to_s.split(",").map{ |c| id_encode("PhysicsComponents-#{c}") }.join(",")
            quiz_id = id_encode("PhysicsExercises-#{row['UniqueID']}")
            q_writer.add({
              :id => quiz_id, 
              :course_id => 1,
              :in_lesson => false,
              :question => row['question'],
              :explanation => row['explanation'],
              :answer_type => row['answer_type'],
              :answer_input => answer_input,
              :answer_output => {:type => "text"}.to_json,
              :component_tokens => component_tokens
            })
            answer_tokens.each_with_index do |a, ans_i|
              answer_id = id_encode("PhysicsExercisesAnswer-#{quiz_id}-#{ans_i}")
              a_writer.add({ :id => answer_id, :quiz_id => quiz_id, :text => a })
            end 
          end
        end
      end
    end
  end
end


