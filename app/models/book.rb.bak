class BookEntry

  # include ActiveRecord::Validations
  attr_accessor :authors, :subjects, :book

  # validate :all_authors_ok, :all_subjects_ok

  def all_authors_okay
    photos.each do |photo|
      errors.add photo.errors unless photo.valid?
    end
  end

  def all_subjects_ok
    subjects.each do |subject|
      errors.add subject.errors unless subject.valid?
    end
  end

  def save
    photos.all?(&:save)
  end

  def book=(book_hash)
    self.attributes(book_hash)
  end

  def authors=(authors_hash)
    incoming_data.each do |incoming|
      if incoming.respond_to? :attributes
        @photos << incoming unless @photos.include? incoming
      else
        if incoming[:id]
          target = @photos.select { |t| t.id == incoming[:id] }
        end
        if target
          target.attributes = incoming
        else
          @photos << Photo.new incoming 
        end
      end
    end
  end

  def subjects=(subject_hash)
    subject_fields=(subject_hash)
  end

  def book
    @book
  end
end

class Book < ActiveRecord::Base
  has_many :writings
  has_many :authors, :through => :writings

  has_many :subject_tags
  has_many :subjects, :through => :subject_tags


  def author_fields=(authors)
    self.authors = authors.values.map { |a| Author.find_or_create_by_first_and_last(a) } 
  end

  def subject_fields=(subjects)
    self.subjects = subjects.values.map { |s| Subject.find_or_create_by_name(s["name"]) }
  end

end
